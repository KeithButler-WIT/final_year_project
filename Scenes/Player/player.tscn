[gd_scene load_steps=29 format=3 uid="uid://b2sf6pmwefh8o"]

[ext_resource type="Script" path="res://Scenes/Player/Player.gd" id="1_pj4ig"]
[ext_resource type="PackedScene" uid="uid://c8mhbkgily14y" path="res://Scenes/Turret.tscn" id="2_tgj4n"]
[ext_resource type="PackedScene" uid="uid://giu8xupwwgxp" path="res://Scenes/Weapons/gun_controller.tscn" id="3_txidj"]
[ext_resource type="Shader" path="res://Scripts/Shaders/walkingParticle.gdshader" id="4_xq8cp"]
[ext_resource type="PackedScene" uid="uid://cuh1yaoty6gvf" path="res://Scenes/Player/camera.tscn" id="5_6omeo"]
[ext_resource type="Texture2D" uid="uid://dm0ym04vu5642" path="res://Assets/Goblin/gobu walk.png" id="6_udxi6"]
[ext_resource type="Script" path="res://Scripts/PickupComponent.gd" id="7_la2uo"]
[ext_resource type="Script" path="res://Scripts/levelupComponent.gd" id="8_fftjq"]

[sub_resource type="Animation" id="Animation_k6fa5"]
resource_name = "idle"
length = 0.8
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.7),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [0, 3]
}

[sub_resource type="Animation" id="Animation_0syso"]
resource_name = "walk_down"
length = 0.6
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4, 0.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 4, 5]
}

[sub_resource type="Animation" id="Animation_ma1r7"]
resource_name = "walk_left"
length = 0.6
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4, 0.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [8, 9, 10, 11, 12, 13]
}

[sub_resource type="Animation" id="Animation_cnal2"]
resource_name = "walk_right"
length = 0.6
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4, 0.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [8, 9, 10, 11, 12, 13]
}

[sub_resource type="Animation" id="Animation_emudm"]
resource_name = "walk_up"
length = 0.6
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4, 0.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [16, 17, 18, 19, 20, 21]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_kdu7e"]
_data = {
"idle": SubResource("Animation_k6fa5"),
"walk_down": SubResource("Animation_0syso"),
"walk_left": SubResource("Animation_ma1r7"),
"walk_right": SubResource("Animation_cnal2"),
"walk_up": SubResource("Animation_emudm")
}

[sub_resource type="Shader" id="Shader_h6wo1"]
code = "shader_type spatial;
render_mode unshaded;

// MIT License. Made by Leo Peltola
// Inspired by https://threejs.org/examples/webgl_postprocessing_pixel.html

uniform sampler2D DEPTH_TEXTURE : hint_depth_texture, filter_linear_mipmap;
uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
uniform sampler2D NORMAL_TEXTURE : hint_normal_roughness_texture, filter_nearest;

uniform bool shadows_enabled = true;
uniform bool highlights_enabled = true;
uniform float shadow_strength : hint_range(0.0, 1.0, 0.01) = 0.4;
uniform float highlight_strength : hint_range(0.0, 1.0, 0.01) = 0.1;
uniform vec3 highlight_color : source_color = vec3(1.);
uniform vec3 shadow_color : source_color = vec3(0.0);

varying mat4 model_view_matrix;


float getDepth(vec2 screen_uv, sampler2D depth_texture, mat4 inv_projection_matrix){
//	Credit: https://godotshaders.com/shader/depth-modulated-pixel-outline-in-screen-space/
	float raw_depth = texture(depth_texture, screen_uv)[0];
	vec3 normalized_device_coordinates = vec3(screen_uv * 2.0 - 1.0, raw_depth);
    vec4 view_space = inv_projection_matrix * vec4(normalized_device_coordinates, 1.0);	
	view_space.xyz /= view_space.w;	
	return -view_space.z;
}

vec3 getPos(float depth, mat4 mvm, mat4 ipm, vec2 suv, mat4 wm, mat4 icm){
  vec4 pos = inverse(mvm) * ipm * vec4((suv * 2.0 - 1.0), depth * 2.0 - 1.0, 1.0);
  pos.xyz /= (pos.w+0.0001*(1.-abs(sign(pos.w))));
  return (pos*icm).xyz+wm[3].xyz;
}

float normalIndicator(vec3 normalEdgeBias, vec3 baseNormal, vec3 newNormal, float depth_diff){
	// Credit: https://threejs.org/examples/webgl_postprocessing_pixel.html
	float normalDiff = dot(baseNormal - newNormal, normalEdgeBias);
	float normalIndicator = clamp(smoothstep(-.01, .01, normalDiff), 0.0, 1.0);
	float depthIndicator = clamp(sign(depth_diff * .25 + .0025), 0.0, 1.0);
	return (1.0 - dot(baseNormal, newNormal)) * depthIndicator * normalIndicator;
}

void vertex(){
    model_view_matrix = VIEW_MATRIX * mat4(INV_VIEW_MATRIX[0], INV_VIEW_MATRIX[1], INV_VIEW_MATRIX[2], MODEL_MATRIX[3]);
}

void fragment() {
	vec2 e = vec2(1./VIEWPORT_SIZE.xy);
	
//	Shadows
	float depth_diff = 0.0;
	float neg_depth_diff = .5;
	if (shadows_enabled) {
		float depth = getDepth(SCREEN_UV, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
		float du = getDepth(SCREEN_UV+vec2(0., -1.)*e, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
		float dr = getDepth(SCREEN_UV+vec2(1., 0.)*e, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
		float dd = getDepth(SCREEN_UV+vec2(0., 1.)*e, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
		float dl = getDepth(SCREEN_UV+vec2(-1., 0.)*e, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
		depth_diff += clamp(du - depth, 0., 1.);
		depth_diff += clamp(dd - depth, 0., 1.);
		depth_diff += clamp(dr - depth, 0., 1.);
		depth_diff += clamp(dl - depth, 0., 1.);
		neg_depth_diff += depth - du;
		neg_depth_diff += depth - dd;
		neg_depth_diff += depth - dr;
		neg_depth_diff += depth - dl;
		neg_depth_diff = clamp(neg_depth_diff, 0., 1.);
		neg_depth_diff = clamp(smoothstep(0.5, 0.5, neg_depth_diff)*10., 0., 1.);
		depth_diff = smoothstep(0.2, 0.3, depth_diff);
//		ALBEDO = vec3(neg_depth_diff);
	}
	
//	Highlights
	float normal_diff = 0.;
	if (highlights_enabled) {
		vec3 normal = texture(NORMAL_TEXTURE, SCREEN_UV).rgb * 2.0 - 1.0;
		vec3 nu = texture(NORMAL_TEXTURE, SCREEN_UV+vec2(0., -1.)*e).rgb * 2.0 - 1.0;
		vec3 nr = texture(NORMAL_TEXTURE, SCREEN_UV+vec2(1., 0.)*e).rgb * 2.0 - 1.0;
		vec3 nd = texture(NORMAL_TEXTURE, SCREEN_UV+vec2(0., 1.)*e).rgb * 2.0 - 1.0;
		vec3 nl = texture(NORMAL_TEXTURE, SCREEN_UV+vec2(-1., 0.)*e).rgb * 2.0 - 1.0;
		vec3 normal_edge_bias = (vec3(1., 1., 1.));
		normal_diff += normalIndicator(normal_edge_bias, normal, nu, depth_diff);
		normal_diff += normalIndicator(normal_edge_bias, normal, nr, depth_diff);
		normal_diff += normalIndicator(normal_edge_bias, normal, nd, depth_diff);
		normal_diff += normalIndicator(normal_edge_bias, normal, nl, depth_diff);
		normal_diff = smoothstep(0.2, 0.8, normal_diff);
		normal_diff = clamp(normal_diff-neg_depth_diff, 0., 1.);
//		ALBEDO = vec3(normal_diff);
	}
	

	vec3 original_color = texture(SCREEN_TEXTURE, SCREEN_UV).rgb;
	vec3 final_highlight_color = mix(original_color, highlight_color, highlight_strength);
	vec3 final_shadow_color = mix(original_color, shadow_color, shadow_strength);
	vec3 final = original_color;
	if (highlights_enabled) {
		final = mix(final, final_highlight_color, normal_diff);
	}
	if (shadows_enabled) {
		final = mix(final, final_shadow_color, depth_diff);
	}
	ALBEDO = final;

	float alpha_mask = depth_diff * float(shadows_enabled) + normal_diff * float(highlights_enabled);
	ALPHA = clamp((alpha_mask) * 5., 0., 1.);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_jndjh"]
render_priority = 0
shader = SubResource("Shader_h6wo1")
shader_parameter/shadows_enabled = true
shader_parameter/highlights_enabled = true
shader_parameter/shadow_strength = 0.4
shader_parameter/highlight_strength = 0.1
shader_parameter/highlight_color = Color(1, 1, 1, 1)
shader_parameter/shadow_color = Color(0, 0, 0, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_ilory"]
next_pass = SubResource("ShaderMaterial_jndjh")

[sub_resource type="CapsuleMesh" id="CapsuleMesh_8c5om"]
material = SubResource("StandardMaterial3D_ilory")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_tb11n"]
diffuse_mode = 3
albedo_color = Color(1, 0.376471, 0.0588235, 1)

[sub_resource type="BoxMesh" id="BoxMesh_pyhmp"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_8smkj"]
diffuse_mode = 3
albedo_color = Color(0.47451, 0.47451, 0.47451, 1)

[sub_resource type="SphereMesh" id="SphereMesh_il5k3"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_wapkd"]
diffuse_mode = 3
albedo_color = Color(1, 0.376471, 0.0588235, 1)

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_417lt"]

[sub_resource type="FogMaterial" id="FogMaterial_0fcq3"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_l2krx"]
render_priority = 0
next_pass = SubResource("FogMaterial_0fcq3")
shader = ExtResource("4_xq8cp")

[sub_resource type="BoxMesh" id="BoxMesh_l6iob"]

[sub_resource type="CylinderShape3D" id="CylinderShape3D_rlva5"]
height = 5.0
radius = 1.0

[node name="Player" type="CharacterBody3D"]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0.505591, 0)
collision_mask = 255
script = ExtResource("1_pj4ig")
packet_turret = ExtResource("2_tgj4n")
metadata/_edit_group_ = true

[node name="Camera" parent="." instance=ExtResource("5_6omeo")]
transform = Transform3D(1, 3.55271e-15, 0, 0, 0.5, 0.866025, 0, -0.866025, 0.5, 0, 11, 6)
projection = 0
size = 11.085
post_processing = false

[node name="Character" type="Sprite3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.906308, 0.422618, 0, -0.422618, 0.906308, 0.1, 0, 4.37114e-09)
pixel_size = 0.1
shaded = true
texture_filter = 0
texture = ExtResource("6_udxi6")
hframes = 8
vframes = 3
frame = 16

[node name="AnimationPlayer" type="AnimationPlayer" parent="Character"]
libraries = {
"": SubResource("AnimationLibrary_kdu7e")
}
speed_scale = 0.5

[node name="Body" type="MeshInstance3D" parent="."]
visible = false
mesh = SubResource("CapsuleMesh_8c5om")
surface_material_override/0 = SubResource("StandardMaterial3D_tb11n")

[node name="Eyes" type="MeshInstance3D" parent="Body"]
transform = Transform3D(0.60041, 0, 0, 0, 0.204517, 0, 0, 0, 0.377427, 0, 0.435307, -0.407264)
mesh = SubResource("BoxMesh_pyhmp")
skeleton = NodePath("../..")
surface_material_override/0 = SubResource("StandardMaterial3D_8smkj")

[node name="Hand" type="Marker3D" parent="Body"]

[node name="MeshInstance3D" type="MeshInstance3D" parent="Body/Hand"]
transform = Transform3D(0.4, 0, 0, 0, 0.4, 0, 0, 0, 0.4, 0, 0, 0)
mesh = SubResource("SphereMesh_il5k3")
surface_material_override/0 = SubResource("StandardMaterial3D_wapkd")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_417lt")

[node name="Camera_Old" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.5, 0.866025, 0, -0.866025, 0.5, 0, 11, 6)
visible = false
current = true

[node name="GunController" parent="." instance=ExtResource("3_txidj")]

[node name="GPUParticles3D" type="GPUParticles3D" parent="."]
transparency = 0.7
visibility_range_fade_mode = 1
emitting = false
collision_base_size = 0.0
draw_order = 2
trail_enabled = true
process_material = SubResource("ShaderMaterial_l2krx")
draw_pass_1 = SubResource("BoxMesh_l6iob")

[node name="turret_place_timer" type="Timer" parent="."]
wait_time = 5.0
autostart = true

[node name="pickup_area" type="Area3D" parent="."]
collision_mask = 32

[node name="CollisionShape3D" type="CollisionShape3D" parent="pickup_area"]
shape = SubResource("CylinderShape3D_rlva5")

[node name="PickupComponent" type="Node3D" parent="."]
script = ExtResource("7_la2uo")

[node name="levelupComponent" type="Node3D" parent="."]
script = ExtResource("8_fftjq")

[connection signal="timeout" from="turret_place_timer" to="." method="_on_turret_place_timer_timeout"]
[connection signal="body_entered" from="pickup_area" to="PickupComponent" method="_on_pickup_area_body_entered"]
